# Generated by roxygen2: do not edit by hand

S3method(boot_ci,cor_phylo)
S3method(family,communityPGLMM)
S3method(fitted,communityPGLMM)
S3method(fixef,communityPGLMM)
S3method(model.frame,communityPGLMM)
S3method(nobs,communityPGLMM)
S3method(plot_bayes,communityPGLMM)
S3method(predict,communityPGLMM)
S3method(print,communityPGLMM)
S3method(print,cor_phylo)
S3method(print,cp_refits)
S3method(print,pglmm_compare)
S3method(ranef,communityPGLMM)
S3method(residuals,communityPGLMM)
S3method(simulate,communityPGLMM)
S3method(summary,communityPGLMM)
S3method(summary,pglmm_compare)
export("%nin%")
export(align_comm_V)
export(boot_ci)
export(communityPGLMM)
export(communityPGLMM.matrix.structure)
export(communityPGLMM.plot.re)
export(communityPGLMM.predicted.values)
export(communityPGLMM.profile.LRT)
export(communityPGLMM.show.re)
export(cor_phylo)
export(fixef)
export(get_design_matrix)
export(match_comm_tree)
export(pcd)
export(pcd_pred)
export(pglmm)
export(pglmm_compare)
export(pglmm_matrix_structure)
export(pglmm_plot_ranef)
export(pglmm_plot_re)
export(pglmm_predicted_values)
export(pglmm_profile_LRT)
export(plot_bayes)
export(plot_data)
export(prep_dat_pglmm)
export(psc)
export(psd)
export(pse)
export(psr)
export(psv)
export(psv.spp)
export(ranef)
export(refit_boots)
export(rm_site_noobs)
export(rm_sp_noobs)
export(vcv2)
import(stats)
importClassesFrom(Matrix,RsparseMatrix)
importClassesFrom(Matrix,dgTMatrix)
importClassesFrom(Matrix,dsCMatrix)
importFrom(Rcpp,sourceCpp)
importFrom(ape,compute.brlen)
importFrom(ape,drop.tip)
importFrom(ape,is.rooted)
importFrom(ape,read.tree)
importFrom(ape,vcv)
importFrom(ape,vcv.phylo)
importFrom(ape,write.tree)
importFrom(dplyr,"%>%")
importFrom(graphics,image)
importFrom(graphics,par)
importFrom(lme4,fixef)
importFrom(lme4,ranef)
importFrom(methods,as)
importFrom(methods,hasArg)
importFrom(methods,is)
importFrom(methods,show)
importFrom(utils,compareVersion)
importFrom(utils,packageVersion)
importMethodsFrom(Matrix,"%*%")
importMethodsFrom(Matrix,crossprod)
importMethodsFrom(Matrix,determinant)
importMethodsFrom(Matrix,diag)
importMethodsFrom(Matrix,image)
importMethodsFrom(Matrix,solve)
importMethodsFrom(Matrix,t)
importMethodsFrom(Matrix,tcrossprod)
useDynLib(phyr, .registration = TRUE)
