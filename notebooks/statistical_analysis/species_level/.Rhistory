, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo <- ape::read.nexus("data/phylo.nex")
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phyloZ <- phylo.to.Z(phylo)
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
datG <- read.table("data/data_simple.txt",header=TRUE)
## create observation-level grouping variable
datG$obs <- factor(seq(nrow(datG)))
datG$sp <- datG$phylo
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
nspp <- 15
nsite <- 10
env <- 1:nsite
env <- as.numeric(scale(env))
require(pez)
require(ape)
phy <- rcoal(n = nspp)
Vphy <- vcv(phy)
Vphy <- Vphy/(det(Vphy)^(1/nspp))
iD <- t(chol(Vphy))
intercept <- iD %*% rnorm(nspp)
slope <- iD %*% rnorm(nspp)
prob <- rep(intercept, each = nsite)
prob <- prob + rep(slope, each = nsite) *
rep(env, nspp)
prob <- prob + rnorm(nspp * nsite)
pres <- rbinom(length(prob), size = 1, prob = exp(prob)/(1 +
exp(prob)))
site <- factor(rep(1:nsite, nspp))
species <- factor(rep(1:nspp, each = nsite))
env <- rep(env, nspp)
r.intercept.spp.indep <- list(1, sp = species,
covar = diag(nspp))
r.intercept.spp.phy <- list(1, sp = species,
covar = Vphy)
r.slope.spp.indep <- list(env, sp = species,
covar = diag(nspp))
r.slope.spp.phy <- list(env, sp = species,
covar = Vphy)
r.site <- list(1, site = site, covar = diag(nsite))
rnd.effects <- list(r.intercept.spp.indep,
r.intercept.spp.phy, r.slope.spp.indep,
r.slope.spp.phy, r.site)
model <- communityPGLMM(pres ~ env, family = "binomial",
sp = species, site = site, random.effects = rnd.effects,
REML = TRUE, verbose = FALSE)
pres
env
speices
species
site
rnd.effects
worked_example_phylolmm <- readRDS("C:/Users/ItayMNB10/Downloads/worked_example_phylolmm.rds")
worked_example_phylolmm
library(lme4)
library(ape)
input_files
phylo_examp <-worked_example_phylolmm
try_phy <- phylo_examp[[1]]
titercurves_reduced <- phylo_examp[[2]]
brl_mat <- compute.brlen(try_phy)
phyZ <- phylo.to.Z(brl_mat)
lme4time <- system.time(
lme4fit <- phylo_lmm(
log(Titer) ~ poly(Day, degree = 2, raw = TRUE) + Log_Dose +
+ (1 | Citation)
+ (1 | unique_line)
+ (1 | Scientific_Name)
+ (0 + Day | Scientific_Name)
+ (0 + Daysq | Scientific_Name)
#	  + (0 + Daysq | Scientific_Name)
#		+ (1+X|sp)
, data = titercurves_reduced
, phylonm = c("Scientific_Name")
, phylo = try_phy
, phyloZ = phyZ
, nsp = 45
, control = lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.nRE = "ignore")
)
)
lme4time <- system.time(
lme4fit <- phylo_lmm(
log(Titer) ~ poly(Day, degree = 2, raw = TRUE) + Log_Dose +
+ (1 | Citation)
+ (1 | unique_line)
+ (1 | Scientific_Name)
+ (0 + Day | Scientific_Name)
+ (0 + Daysq | Scientific_Name)
#	  + (0 + Daysq | Scientific_Name)
#		+ (1+X|sp)
, data = titercurves_reduced
, phylonm = c("Scientific_Name")
, phylo = try_phy
, phyloZ = phyZ
, control = lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.nRE = "ignore")
)
)
debug(phylo_lmm)
phylo++lmm
phylo_lmm
summary(phylo_lmm)
lme4fit
remotes::install_github("wzmli/phyloglmm/pkg")
if (!file.exists("data/phylo.nex")) {
dir.create("data")
download.file("http://mpcm-evolution.com/OPM/Chapter11_OPM/data.zip",
dest="data/OPM_ch11_data.zip")
setwd("data")
untar("OPM_ch11_data.zip")
setwd("..")
}
phylo <- ape::read.nexus("data/phylo.nex")
datG <- read.table("data/data_simple.txt",header=TRUE)
## create observation-level grouping variable
datG$obs <- factor(seq(nrow(datG)))
datG$sp <- datG$phylo
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit <- phylo_glmmTMB(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, family = "gaussian"
)
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
is.factor(data[["sp"]])
is.factor(data[["sp"]])
is.factor(data[["sp"]])
abort
is.factor(data[["sp"]])
is.factor(data[["sp"]])
phylonm = "sp"
data=datG
data[[phylonm]]
is.factor(data[[phylonm]])
data$sp = factor(data$sp)
is.factor(data[[phylonm]])
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
data_sp = data[[phylonm]]
!is.factor(data_sp)
datG=data
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit
rownames(phyloz)
rownames(phyloZ)
data$sp
check_phylo_names(phyloZ, data_sp)
data_sp = data[[phylonm]]
check_phylo_names(phyloZ, data_sp)
!identical(rownames(phyloZ), levels(data_sp)
)
data_sp = data[[phylonm]]
!identical(rownames(phyloZ), levels(data_sp))
remotes::install_github("wzmli/phyloglmm/pkg")
library(ape)
library(Matrix)
library(lme4)
library(MASS)
library(glmmTMB)
library(coda)
library(lattice)
library(broom)
library(dplyr)
if (!file.exists("data/phylo.nex")) {
dir.create("data")
download.file("http://mpcm-evolution.com/OPM/Chapter11_OPM/data.zip",
dest="data/OPM_ch11_data.zip")
setwd("data")
untar("OPM_ch11_data.zip")
setwd("..")
}
phylo <- ape::read.nexus("data/phylo.nex")
phyloZ <- phylo.to.Z(phylo)
library(phyloglmm)
phyloZ <- phylo.to.Z(phylo)
datG <- read.table("data/data_simple.txt",header=TRUE)
## create observation-level grouping variable
datG$obs <- factor(seq(nrow(datG)))
datG$sp <- factor(datG$phylo)
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit
View(datG)
phylo_lmm_fit <- phylo_lmm(phen~cofactor+(1|sp)+(1|obs)
, data=datG
, phylonm = "sp"
, phylo = phylo
, phyloZ=phyloZ
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit
library(ape)
#library(geiger)
#library(nlme)
#library(phytools)
#library(phylolm)
library(glue)
#library(glmmTMB)
#library(phyr)
# library(MCMCglmm)
remotes::install_github("wzmli/phyloglmm/pkg")
library(phyloglmm)
do_weighted = TRUE
weighted_str = "unweighted"
if (do_weighted)
{
weighted_str = "weighted"
}
data_path <- glue("../../../data/statistical_analysis/species_level/processed_features_with_ploidy_classification_on_{weighted_str}_networks.csv")
tree_path <- glue("../../../data/statistical_analysis/species_level/species_tree_on_{weighted_str}_networks.nwk")
data <- read.csv(data_path)
rownames(data) <- factor(data$sample_id)
tree <- read.tree(tree_path)
tree_cov_mat <- phylo.to.Z(tree)
#fit <- phyr::pglmm(d ~ is_polyploid + (1|sample_id__),# + (1|network_id) ,# + (1|num_network_pollinators),
#                   data = data,
#                   cov_ranef = list(sample_id = tree),
#                   family = "binomial")
phylo_lmm_fit <- phylo_lmm(d~is_polyploid+(1|sample_id)+(1|network_id)
, data=datG
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit
summary(phylo_lmm_fit)
coef(phylo_lmm_fit)
summary(phylo_lmm_fit)
glmmTMB_fit <- glmmTMBphylo(d~is_polyploid+(1|sample_id)+(1|network_id)
, data=datG
, phyloZ=phyloZ
, phylonm = "sample_id"
, doFit=TRUE
, dispformula = ~1
, REML = FALSE
)
library(ape)
#library(geiger)
#library(nlme)
#library(phytools)
#library(phylolm)
library(glue)
#library(glmmTMB)
#library(phyr)
# library(MCMCglmm)
remotes::install_github("wzmli/phyloglmm/pkg")
library(phyloglmm)
do_weighted = TRUE
weighted_str = "unweighted"
if (do_weighted)
{
weighted_str = "weighted"
}
data_path <- glue("../../../data/statistical_analysis/species_level/processed_features_with_ploidy_classification_on_{weighted_str}_networks.csv")
tree_path <- glue("../../../data/statistical_analysis/species_level/species_tree_on_{weighted_str}_networks.nwk")
data <- read.csv(data_path)
rownames(data) <- factor(data$sample_id)
tree <- read.tree(tree_path)
tree_cov_mat <- phylo.to.Z(tree)
#fit <- phyr::pglmm(d ~ is_polyploid + (1|sample_id__),# + (1|network_id) ,# + (1|num_network_pollinators),
#                   data = data,
#                   cov_ranef = list(sample_id = tree),
#                   family = "binomial")
phylo_lmm_fit <- phylo_lmm(d~is_polyploid+(1|sample_id)+(1|network_id)
, data=datG
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
library(ape)
#library(geiger)
#library(nlme)
#library(phytools)
#library(phylolm)
library(glue)
#library(glmmTMB)
#library(phyr)
# library(MCMCglmm)
remotes::install_github("wzmli/phyloglmm/pkg")
library(phyloglmm)
do_weighted = TRUE
weighted_str = "unweighted"
if (do_weighted)
{
weighted_str = "weighted"
}
data_path <- glue("../../../data/statistical_analysis/species_level/processed_features_with_ploidy_classification_on_{weighted_str}_networks.csv")
tree_path <- glue("../../../data/statistical_analysis/species_level/species_tree_on_{weighted_str}_networks.nwk")
data <- read.csv(data_path)
rownames(data) <- factor(data$sample_id)
tree <- read.tree(tree_path)
tree_cov_mat <- phylo.to.Z(tree)
data <- read.csv(data_path)
rownames(data) <- factor(data$sample_id)
data$sample_id <- factor(data$sample_id)
tree <- read.tree(tree_path)
phylo_lmm_fit <- phylo_lmm(d~is_polyploid+(1|sample_id)+(1|network_id)
, data=datG
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
phylo_lmm_fit <- phylo_lmm(d~is_polyploid+(1|sample_id)+(1|network_id)
, data=data
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
summary(phylo_lmm_fit)
phylo_lmm_fit
phylo_lmm_fit$cofficient
phylo_lmm_fit$cofficiens
coef(summary(phylo_lmm_fit))
View(data)
phylo_lmm_fit <- phylo_lmm(d~is_polyploid+(1|sample_id)+(1|network_id)+(1|num_network_plants)+(1|num_network_pollinators)
, data=data
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, REML = TRUE
, control=lmerControl(check.nobs.vs.nlev="ignore",check.nobs.vs.nRE="ignore")
)
summary(phylo_lmm_fit)
coef(summary(phylo_lmm_fit))[,'Pr(>|z|)']
coef(summary(phylo_lmm_fit))
glmmTMB_fit <- phylo_glmmTMB (d~is_polyploid+(1|sample_id)+(1|network_id)+(1|num_network_plants)+(1|num_network_pollinators)
, data=data
, phyloZ=tree_cov_mat
, phylonm = "sample_id"
, doFit=TRUE
, dispformula = ~1
, REML = FALSE
)
glmmTMB_fit <- phylo_glmmTMB (d~is_polyploid+(1|sample_id)+(1|network_id)+(1|num_network_plants)+(1|num_network_pollinators)
, data=data
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, doFit=TRUE
, dispformula = ~1
, REML = FALSE
)
summary(glmmTMB_fit )
glmmTMB_fit <- phylo_glmmTMB (d~is_polyploid+(1|sample_id)+(1|network_id)+(1|num_network_plants)+(1|num_network_pollinators)
, data=data
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, doFit=TRUE
, dispformula = ~1
, REML = FALSE
, control = glmmTMBControl::glmmTMBControl(rank_check = "skip")
)
install.packages("glmmTMBControl")
library(ape)
#library(geiger)
#library(nlme)
#library(phytools)
#library(phylolm)
library(glue)
library(glmmTMB)
#library(phyr)
# library(MCMCglmm)
remotes::install_github("wzmli/phyloglmm/pkg")
library(phyloglmm)
glmmTMB_fit <- phylo_glmmTMB (d~is_polyploid+(1|sample_id)+(1|network_id)+(1|num_network_plants)+(1|num_network_pollinators)
, data=data
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, doFit=TRUE
, dispformula = ~1
, REML = FALSE
, control = glmmTMB::glmmTMBControl(rank_check = "skip")
)
library(ape)
#library(geiger)
#library(nlme)
#library(phytools)
#library(phylolm)
library(glue)
library(glmmTMB)
#library(phyr)
# library(MCMCglmm)
remotes::install_github("wzmli/phyloglmm/pkg@refactor")
library(phyloglmm)
glmmTMB_fit <- phylo_glmmTMB (d~is_polyploid+(1|sample_id)+(1|network_id)+(1|num_network_plants)+(1|num_network_pollinators)
, data=data
, phylonm = "sample_id"
, phylo = tree
, phyloZ=tree_cov_mat
, doFit=TRUE
, dispformula = ~1
, REML = FALSE
, control = glmmTMB::glmmTMBControl(rank_check = "skip")
)
library(ape)
#library(geiger)
#library(nlme)
#library(phytools)
#library(phylolm)
library(glue)
library(glmmTMB)
#library(phyr)
# library(MCMCglmm)
remotes::install_github("wzmli/phyloglmm/pkg@refactor") # update this new fix: https://stackoverflow.com/questions/74961530/glmmtmb-phylo-error-in-matrixrankmatrixtmbstrucdata-tmbwhichx-length
library(phyloglmm)
library(ape)
#library(geiger)
#library(nlme)
#library(phytools)
#library(phylolm)
library(glue)
library(glmmTMB)
#library(phyr)
# library(MCMCglmm)
remotes::install_github("wzmli/phyloglmm/pkg@refactor") # update this new fix: https://stackoverflow.com/questions/74961530/glmmtmb-phylo-error-in-matrixrankmatrixtmbstrucdata-tmbwhichx-length
